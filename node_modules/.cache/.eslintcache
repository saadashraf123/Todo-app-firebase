[{"D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\index.js":"1","D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\App.tsx":"2","D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\Redux\\Slice.tsx":"3","D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\components\\Todos.tsx":"4","D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\components\\AddTodo.tsx":"5","D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\components\\Title.tsx":"6","D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\firebase.js":"7","D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\components\\Todo.tsx":"8"},{"size":413,"mtime":1677073037394,"results":"9","hashOfConfig":"10"},{"size":339,"mtime":1677504109503,"results":"11","hashOfConfig":"10"},{"size":1054,"mtime":1677077665030,"results":"12","hashOfConfig":"10"},{"size":1125,"mtime":1677503917418,"results":"13","hashOfConfig":"10"},{"size":1008,"mtime":1677077665038,"results":"14","hashOfConfig":"10"},{"size":187,"mtime":1677077665046,"results":"15","hashOfConfig":"10"},{"size":540,"mtime":1677006891227,"results":"16","hashOfConfig":"10"},{"size":2260,"mtime":1677505002553,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kcj7gb",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\index.js",[],[],"D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\App.tsx",[],[],"D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\Redux\\Slice.tsx",[],[],"D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\components\\Todos.tsx",["44"],[],"import React, { useEffect } from 'react'\r\nimport Todo from \"./Todo\";\r\nimport { collection, query, onSnapshot } from \"firebase/firestore\";\r\nimport { db } from \"../firebase\";\r\nimport { getAllTodos, useAppSelector, useAppDispatch } from '../Redux/Slice'\r\n\r\nconst Todos = () => {\r\n    const dispatch = useAppDispatch()\r\n    const todo = useAppSelector(state=>state.todos.todos)    \r\n\r\n    useEffect(() => {\r\n        const q = query(collection(db, \"todos\"));\r\n        const unsub = onSnapshot(q, (querySnapshot) => {\r\n            let todosArray:(object)[] = [];\r\n            querySnapshot.forEach((doc) => {\r\n                todosArray.push({ ...doc.data(), id: doc.id });\r\n            });\r\n            dispatch(getAllTodos(todosArray))\r\n        });\r\n        return () => unsub();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                todo.length > 0 &&\r\n                <div className=\"todo_container\">\r\n                    <h2>Todo List</h2>\r\n                    {todo.map((data) => (<Todo key={data.id} todo={data} />))}\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todos","D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\components\\AddTodo.tsx",[],[],"D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\components\\Title.tsx",[],[],"D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\firebase.js",[],[],"D:\\react\\ishaq\\firebase-app\\Todo-app-firebase\\src\\components\\Todo.tsx",["45"],[],"import React from \"react\";\r\nimport { db } from \"../firebase\";\r\nimport { doc, updateDoc, deleteDoc } from \"firebase/firestore\";\r\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { useForm, SubmitHandler } from 'react-hook-form'\r\n\r\ntype FormValues ={\r\n    title: string;\r\n};\r\n\r\ninterface TodoListProps {\r\n  todo: todoTypes;\r\n}\r\n\r\ninterface todoTypes {\r\n  title: string;\r\n  completed: boolean;\r\n  id: string\r\n}\r\n\r\nconst styles = {\r\n    container: {\r\n      textDecoration: \"line-through\"\r\n    }\r\n  } as const;\r\n  \r\nconst Todo = ({ todo }:TodoListProps) => {\r\n    const { register, handleSubmit, formState: { errors } } = useForm<FormValues>({\r\n        defaultValues: {\r\n            title: todo.title,\r\n        }\r\n    });\r\n    const handleChange: SubmitHandler<FormValues> = (data) => {\r\n        updateDoc(doc(db, \"todos\", todo.id), { title: data.title });\r\n    };\r\n\r\n    const toggleComplete = async (todo:todoTypes) => {\r\n        await updateDoc(doc(db, \"todos\", todo.id), { completed: !todo.completed });\r\n    };\r\n    const handleDelete = async (todo:todoTypes) => {\r\n        await deleteDoc(doc(db, \"todos\", todo.id));\r\n    };\r\n    return (\r\n        <div className=\"todo\">\r\n            <form onSubmit={handleSubmit(handleChange)}>\r\n                <input {...register(\"title\", { required: \"This is Required\" })}\r\n                    style={{\r\n                        textDecoration: todo.completed ? 'line-through' : 'none'\r\n                    }}\r\n                />\r\n                <p>{errors.title?.message}</p>\r\n                <button type='submit' value=\"Edit\" className=\"button button-edit\" ><EditIcon id=\"i\" /></button>\r\n                <button\r\n                    className=\"button button-complete\"\r\n                    onClick={() => toggleComplete(todo)}\r\n                >\r\n                    <CheckCircleIcon id=\"i\" />\r\n                </button>\r\n                <button className=\"button button-delete\"\r\n                    onClick={() => handleDelete(todo)}\r\n                >\r\n                    <DeleteIcon id=\"i\" />\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo",{"ruleId":"46","severity":1,"message":"47","line":21,"column":8,"nodeType":"48","endLine":21,"endColumn":10,"suggestions":"49"},{"ruleId":"50","severity":1,"message":"51","line":23,"column":7,"nodeType":"52","messageId":"53","endLine":23,"endColumn":13},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["54"],"@typescript-eslint/no-unused-vars","'styles' is assigned a value but never used.","Identifier","unusedVar",{"desc":"55","fix":"56"},"Update the dependencies array to be: [dispatch]",{"range":"57","text":"58"},[784,786],"[dispatch]"]