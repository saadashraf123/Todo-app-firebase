{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { configureStore } from '@reduxjs/toolkit';\n// import logger from 'redux-logger'\nimport { collection, query, onSnapshot } from \"firebase/firestore\";\nimport { db } from \"../firebase\";\nconst initialState = {\n  todo: []\n};\nexport const Slice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    getAllTodos: async state => {\n      const q = await query(collection(db, \"todos\"));\n      const unsub = await onSnapshot(q, querySnapshot => {\n        let todosArray = [];\n        querySnapshot.forEach(doc => {\n          todosArray.push({\n            ...doc.data(),\n            id: doc.id\n          });\n        });\n        var newTodos = state.todo;\n        newTodos = todosArray;\n        console.log(newTodos);\n      });\n      // unsub();\n    }\n  }\n});\n\nexport const store = configureStore({\n  reducer: {\n    todos: Slice.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false\n  })\n});\nexport const {\n  getAllTodos\n} = Slice.actions;\nexport default Slice.reducer;","map":{"version":3,"names":["createSlice","configureStore","collection","query","onSnapshot","db","initialState","todo","Slice","name","reducers","getAllTodos","state","q","unsub","querySnapshot","todosArray","forEach","doc","push","data","id","newTodos","console","log","store","reducer","todos","middleware","getDefaultMiddleware","serializableCheck","actions"],"sources":["D:/react/ishaq/todo-app-firebase/src/Redux/Slice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { configureStore } from '@reduxjs/toolkit'\r\n// import logger from 'redux-logger'\r\nimport { collection, query, onSnapshot } from \"firebase/firestore\";\r\nimport { db } from \"../firebase\";\r\n\r\n\r\nconst initialState = {\r\n    todo: [],\r\n}\r\n\r\nexport const Slice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {\r\n        getAllTodos: async (state) => {\r\n            const q = await query(collection(db, \"todos\"));\r\n            const unsub = await \r\n            onSnapshot(q, (querySnapshot) => {\r\n                let todosArray = [];\r\n                querySnapshot.forEach((doc) => {\r\n                    todosArray.push({ ...doc.data(), id: doc.id });\r\n                });\r\n                var newTodos = state.todo;\r\n                newTodos = todosArray\r\n                console.log(newTodos);\r\n            });\r\n            // unsub();\r\n        },\r\n    },\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        todos: Slice.reducer,\r\n    },\r\n    middleware: getDefaultMiddleware =>\r\n        getDefaultMiddleware({\r\n            serializableCheck: false,\r\n        }),\r\n})\r\n\r\n\r\nexport const { getAllTodos } = Slice.actions\r\n\r\nexport default Slice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,QAAQ,kBAAkB;AACjD;AACA,SAASC,UAAU,EAAEC,KAAK,EAAEC,UAAU,QAAQ,oBAAoB;AAClE,SAASC,EAAE,QAAQ,aAAa;AAGhC,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE;AACV,CAAC;AAED,OAAO,MAAMC,KAAK,GAAGR,WAAW,CAAC;EAC7BS,IAAI,EAAE,OAAO;EACbH,YAAY;EACZI,QAAQ,EAAE;IACNC,WAAW,EAAE,MAAOC,KAAK,IAAK;MAC1B,MAAMC,CAAC,GAAG,MAAMV,KAAK,CAACD,UAAU,CAACG,EAAE,EAAE,OAAO,CAAC,CAAC;MAC9C,MAAMS,KAAK,GAAG,MACdV,UAAU,CAACS,CAAC,EAAGE,aAAa,IAAK;QAC7B,IAAIC,UAAU,GAAG,EAAE;QACnBD,aAAa,CAACE,OAAO,CAAEC,GAAG,IAAK;UAC3BF,UAAU,CAACG,IAAI,CAAC;YAAE,GAAGD,GAAG,CAACE,IAAI,EAAE;YAAEC,EAAE,EAAEH,GAAG,CAACG;UAAG,CAAC,CAAC;QAClD,CAAC,CAAC;QACF,IAAIC,QAAQ,GAAGV,KAAK,CAACL,IAAI;QACzBe,QAAQ,GAAGN,UAAU;QACrBO,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACzB,CAAC,CAAC;MACF;IACJ;EACJ;AACJ,CAAC,CAAC;;AAEF,OAAO,MAAMG,KAAK,GAAGxB,cAAc,CAAC;EAChCyB,OAAO,EAAE;IACLC,KAAK,EAAEnB,KAAK,CAACkB;EACjB,CAAC;EACDE,UAAU,EAAEC,oBAAoB,IAC5BA,oBAAoB,CAAC;IACjBC,iBAAiB,EAAE;EACvB,CAAC;AACT,CAAC,CAAC;AAGF,OAAO,MAAM;EAAEnB;AAAY,CAAC,GAAGH,KAAK,CAACuB,OAAO;AAE5C,eAAevB,KAAK,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}